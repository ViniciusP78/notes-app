{"version":3,"sources":["components/Note.tsx","components/AddNote.tsx","components/Home.tsx","components/ViewNote.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Note","id","title","content","Card","color","Content","Header","Meta","className","Description","extra","Button","basic","as","Link","to","AddNote","updateNotesData","useState","uuidv4","formData","setFormData","Segment","stacked","textAlign","Divider","Form","onSubmit","event","preventDefault","data","localStorage","getItem","fusedData","JSON","parse","push","setItem","stringify","Input","label","placeholder","name","value","onChange","target","required","TextArea","style","minHeight","primary","type","Home","List","Item","href","ViewNote","handleViewNote","viewData","setViewData","useParams","console","log","useEffect","App","notesData","setNotesData","Container","basename","Menu","header","Icon","negative","onClick","clear","position","icon","Grid","Column","width","Message","info","breakpointCols","columnClassName","map","item","path","viewNoteData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e14aa671.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Button, Card } from  'semantic-ui-react';\r\n\r\nimport {INote} from '../App';\r\n\r\nconst Note:React.FC<INote> = ({id, title, content}) => {\r\n  return (\r\n    <Card color='teal'>\r\n      <Card.Content>\r\n        <Card.Header>{title}</Card.Header>\r\n        <Card.Meta>\r\n          <span className='date'>Joined in 2015</span>\r\n        </Card.Meta>\r\n        <Card.Description>\r\n          {content}\r\n        </Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <Button basic as={Link} to={`/note/${id}`}>View</Button>\r\n        <Button basic>Delete</Button>\r\n      </Card.Content>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Note;","import React, { useState, FormEvent, ChangeEvent, } from 'react';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport {Segment, Header, Divider, Form} from 'semantic-ui-react';\r\n\r\nimport {INote} from '../App';\r\n\r\ninterface IAddNote {\r\n  updateNotesData : (notesData : INote[]) => void\r\n}\r\n\r\nconst AddNote:React.FC<IAddNote> = ({updateNotesData}) => {\r\n\r\n  const [formData, setFormData] = useState<INote>({id:uuidv4(),title:'',content:''});\r\n\r\n  const handleAddNote = (event: FormEvent) => {\r\n    event.preventDefault(); // impede que o browser atualize\r\n\r\n    setFormData({...formData, id:uuidv4()}); // Adicionar o uuid aqui n√£o funciona\r\n\r\n    let data = localStorage.getItem('notesData');\r\n\r\n    let fusedData:INote[] = [];\r\n\r\n    if (data) {fusedData = JSON.parse(data);}\r\n\r\n    fusedData.push(formData);\r\n    localStorage.setItem('notesData',JSON.stringify(fusedData));\r\n\r\n    updateNotesData(fusedData)\r\n    \r\n    setFormData({id:uuidv4(),title:'',content:''});\r\n    \r\n  }\r\n\r\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = event.target;\r\n    setFormData({ ...formData, [name]: value })\r\n  }\r\n\r\n  const handleTextAreaChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\r\n    const { name, value } = event.target;\r\n    setFormData({ ...formData, [name]: value })\r\n  }\r\n\r\n  return (\r\n    <Segment stacked>\r\n      <Header as='h2' textAlign='center'>New Note</Header>\r\n      <Divider />\r\n      <Form onSubmit={handleAddNote}>\r\n        <Form.Input label='Title' placeholder='Title' name='title' value={formData.title} onChange={handleInputChange}  required/>\r\n        <Form.TextArea label='Content' placeholder='Content' style={{ minHeight: 400 }} name='content' value={formData.content} onChange={handleTextAreaChange} required/>\r\n        <Form.Button primary type='submit'>\r\n          Create Note\r\n        </Form.Button>\r\n      </Form>\r\n    </Segment>\r\n  )\r\n  \r\n}\r\n\r\nexport default AddNote","import React from 'react';\r\n\r\nimport {Segment, Header, Divider, List} from 'semantic-ui-react';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <Segment stacked>\r\n      <Header as='h2' textAlign='center'>Notes-app</Header>\r\n      <Divider />\r\n      <p>Just a simple project to learn some of the React properties</p>\r\n\r\n      <Header as='h3'>\r\n        Tecnologies used:\r\n      </Header>\r\n\r\n      <List>\r\n        <List.Item>\r\n          <List.Header as='a' href='https://reactjs.org'>\r\n            React\r\n          </List.Header>\r\n          <List.Description>\r\n            Provides the basic rendering.\r\n          </List.Description>\r\n        </List.Item>\r\n\r\n        <List.Item>\r\n          <List.Header as='a' href='https://reactrouter.com'>\r\n            React Router\r\n          </List.Header>\r\n          <List.Description>\r\n            A library that provides routing for a react page.\r\n          </List.Description>\r\n        </List.Item>\r\n\r\n        <List.Item>\r\n          <List.Header as='a' href='https://react.semantic-ui.com'>\r\n            Semantic UI - React\r\n          </List.Header>\r\n          <List.Description>\r\n            A nice and clean ui framework tailored for react.\r\n          </List.Description>\r\n        </List.Item>\r\n\r\n        <List.Item>\r\n          <List.Header as='a' href='https://www.npmjs.com/package/uuid'>\r\n            Uuid\r\n          </List.Header>\r\n          <List.Description>\r\n            A library for generating unique Ids.\r\n          </List.Description>\r\n        </List.Item>\r\n\r\n        <List.Item>\r\n          <List.Header as='a' href='https://www.npmjs.com/package/masonry-layout'>\r\n            Masonry-Layout\r\n          </List.Header>\r\n          <List.Description>\r\n            A library for creating a cascade effect on elements.\r\n          </List.Description>\r\n        </List.Item>\r\n\r\n\r\n        \r\n      </List>\r\n    </Segment>\r\n  )\r\n  \r\n}\r\n\r\nexport default Home;","import React, { useEffect, useState } from 'react';\r\n\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport {Segment, Header, Divider} from 'semantic-ui-react';\r\n\r\nimport {INote} from '../App'\r\n\r\ninterface IParams {\r\n  id : string\r\n}\r\n\r\ninterface IViewNote {\r\n  handleViewNote: (id: string) => INote | null\r\n}\r\n\r\nconst ViewNote:React.FC<IViewNote> = ({handleViewNote}) => {\r\n  const [ viewData , setViewData ] = useState<INote>();\r\n\r\n\r\n  const { id } = useParams<IParams>();\r\n  console.log(id);\r\n  \r\n  useEffect(() => {\r\n    if (id) {\r\n      let data = handleViewNote(id);\r\n      console.log(data);\r\n      if (data) {\r\n        setViewData(data)\r\n      }\r\n    }\r\n  }, [handleViewNote, id])\r\n\r\n  return (\r\n    <Segment stacked>\r\n      <Header as='h2' textAlign='center'>{(viewData)? viewData.title : \"404\"}</Header>\r\n      <Divider />\r\n      <p>{viewData?.content}</p>\r\n    </Segment>\r\n  )\r\n  \r\n}\r\n\r\nexport default ViewNote;","import React, { useEffect, useState } from 'react';\n\nimport { Container, Menu, Button, Input, Grid, Icon, Message } from  'semantic-ui-react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nimport Note from './components/Note';\nimport AddNote from './components/AddNote';\nimport Home from './components/Home';\nimport ViewNote from './components/ViewNote';\n\nimport Masonry from 'react-masonry-css';\n\nexport interface INote {\n  id: string,\n  title: string,\n  content: string\n}\n\nconst App = () => {\n\n  const [notesData, setNotesData] = useState<INote[]>([]);\n\n  useEffect(() => {\n    let data = localStorage.getItem('notesData');\n    if (data) {\n      setNotesData(JSON.parse(data));\n    } else {\n      console.log('Empty Storage')\n    }\n  }, []);\n\n  const handleClearStorage = (): void => {\n    localStorage.clear();\n\n    setNotesData([]);\n  }\n\n  const handleViewNote = (id: string): INote | null => {\n    let viewNoteData = null;\n\n    notesData.map(item => {\n      if (item.id === id) {\n        viewNoteData = item;\n      }\n    })\n    return viewNoteData\n  }\n\n\n  return (\n    <Container>\n      <Router basename='notes-app'>\n        <Menu>\n          <Menu.Item header>Notes-app</Menu.Item>\n\n          <Menu.Item>\n            <Button basic as={Link} to='/'>\n              Home\n            </Button>\n          </Menu.Item>\n\n          <Menu.Item>\n            <Button primary as={Link} to='/new'>\n\n            <Icon name='add' />\n              New note\n            </Button>\n          </Menu.Item>\n\n          <Menu.Item>\n            <Button basic negative onClick={handleClearStorage}>\n              Clear Storage\n            </Button>\n          </Menu.Item>\n\n          <Menu.Item position='right'>\n            <Input className='icon' icon='search' placeholder='Search...' />\n          </Menu.Item>\n        </Menu>\n\n        <Grid>\n          <Grid.Column width={8}>\n            {\n              (!notesData[0]) &&\n              <Message info>No notes added. Add a new note using the button above.</Message>\n            }\n          <Masonry\n            breakpointCols={2}\n            className=\"my-masonry-grid\"\n            columnClassName=\"my-masonry-grid_column\"\n          >\n            {notesData.map(item => <Note key={item.id} {...item} />)}\n          </Masonry>\n\n          </Grid.Column>\n          <Grid.Column width={8}>\n            <Switch>\n              <Route path='/new'>\n                <AddNote updateNotesData={setNotesData} />\n              </Route>\n\n              <Route path={'/note/:id'} >\n                <ViewNote handleViewNote={handleViewNote}/>\n              </Route>\n\n              <Route path='/'>\n                <Home />\n              </Route>\n              \n            </Switch>\n            \n            \n          </Grid.Column>\n        </Grid>\n\n      </Router>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}