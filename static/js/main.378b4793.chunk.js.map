{"version":3,"sources":["components/Note.tsx","contexts/NotesContext.tsx","components/AddNote.tsx","components/Home.tsx","components/ViewNote.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Note","id","title","List","Item","as","Link","to","Icon","name","Content","Header","NotesContext","createContext","NotesProvider","children","useState","notes","setNotes","useEffect","JSONNotes","localStorage","getItem","ParsedNotes","JSON","parse","setItem","stringify","Provider","value","saveNote","content","note","uuidv4","createAt","clearNotes","AddNote","useContext","formData","setFormData","Segment","stacked","textAlign","Divider","Form","onSubmit","event","preventDefault","Input","label","placeholder","onChange","target","required","TextArea","style","minHeight","Button","primary","type","Message","info","rel","href","Home","Description","ViewNote","viewData","setViewData","useParams","console","log","forEach","item","App","Container","Menu","header","basic","negative","onClick","clear","position","className","icon","Grid","Column","width","divided","selection","map","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.378b4793.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Icon, List} from  'semantic-ui-react';\r\n\r\nimport {INote} from '../App';\r\n\r\nconst Note:React.FC<INote> = ({id, title}) => {\r\n  return (\r\n    <List.Item as={Link} to={`/note/${id}`}>\r\n      <Icon name='sticky note outline' />\r\n      <List.Content>\r\n        <List.Header>\r\n          {title}\r\n        </List.Header>\r\n      </List.Content>\r\n      \r\n    </List.Item>\r\n  //   <Segment>\r\n  //     {title}\r\n  //     <Button.Group icon compact>\r\n  //   <Button basic color='blue'>\r\n  //   <Icon name='edit outline' />\r\n  //   </Button>\r\n  //   <Button basic color='red'>\r\n  //     <Icon name='trash alternate outline' />\r\n  //   </Button>\r\n  // </Button.Group>\r\n  //   </Segment>\r\n    // <Card color='teal'>\r\n    //   <Card.Content>\r\n    //     <Card.Header>{title}</Card.Header>\r\n    //     <Card.Meta>\r\n    //       <span className='date'>Joined in 2015</span>\r\n    //     </Card.Meta>\r\n    //     <Card.Description>\r\n    //       <Icon name='file text' />\r\n    //     </Card.Description>\r\n    //   </Card.Content>\r\n    //   <Card.Content extra>\r\n    //     <Button basic as={Link} to={`/note/${id}`}>View</Button>\r\n    //     <Button basic>Delete</Button>\r\n    //   </Card.Content>\r\n    // </Card>\r\n  )\r\n}\r\n\r\nexport default Note;","import React, { createContext, ReactNode, useEffect, useState } from 'react';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport interface INote {\r\n  id: string,\r\n  title: string,\r\n  content: string,\r\n  createAt: string,\r\n  tags?: string[]\r\n}\r\n\r\ninterface INotesContext {\r\n  notes: INote[],\r\n  saveNote: (title: string, content: string) => void,\r\n  clearNotes: () => void\r\n}\r\n\r\nexport const NotesContext = createContext({} as INotesContext);\r\n\r\nexport function NotesProvider({children} : {children: ReactNode}) {\r\n\r\n  const [notes, setNotes] = useState<INote[]>([]);\r\n\r\n  useEffect(() => {\r\n    let JSONNotes = localStorage.getItem('notes');\r\n    if (JSONNotes) {\r\n      let ParsedNotes = JSON.parse(JSONNotes);\r\n      setNotes(ParsedNotes);\r\n    }\r\n  },[])\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('notes', JSON.stringify(notes))\r\n  }, [notes])\r\n\r\n  function saveNote(title: string, content: string) {\r\n    let note = {\r\n      id: uuidv4(),\r\n      title,\r\n      content,\r\n      createAt: 'agora'\r\n    };\r\n\r\n    setNotes([...notes, note]);\r\n  }\r\n\r\n  function clearNotes() {\r\n    setNotes([]);\r\n  }\r\n\r\n  return (\r\n    <NotesContext.Provider value={{\r\n      notes,\r\n      saveNote,\r\n      clearNotes\r\n    }}>\r\n      {children}\r\n    </NotesContext.Provider>\r\n  )\r\n}\r\n","import React, { useState, FormEvent, ChangeEvent, useContext, } from 'react';\r\n\r\n\r\nimport {Segment, Header, Divider, Form, Message, Icon} from 'semantic-ui-react';\r\n\r\nimport { NotesContext } from '../contexts/NotesContext';\r\n\r\n\r\nconst AddNote = () => {\r\n  const {saveNote} = useContext(NotesContext);\r\n\r\n  const [formData, setFormData] = useState({title:'',content:''});\r\n\r\n  const handleAddNote = (event: FormEvent) => {\r\n    event.preventDefault(); // impede que o browser atualize\r\n    \r\n    saveNote(formData.title, formData.content)\r\n    \r\n    setFormData({title:'',content:''});\r\n  }\r\n\r\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = event.target;\r\n    setFormData({ ...formData, [name]: value })\r\n  }\r\n\r\n  const handleTextAreaChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\r\n    const { name, value } = event.target;\r\n    setFormData({ ...formData, [name]: value })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Segment stacked>\r\n        <Header as='h2' textAlign='center'>New Note</Header>\r\n        <Divider />\r\n        <Form onSubmit={handleAddNote}>\r\n          <Form.Input label='Title' placeholder='Title' name='title' value={formData.title} onChange={handleInputChange}  required/>\r\n          <Form.TextArea label='Content' placeholder='Content' style={{ minHeight: 400 }} name='content' value={formData.content} onChange={handleTextAreaChange} required/>\r\n          <Form.Button primary type='submit'>\r\n            Create Note\r\n          </Form.Button>\r\n        </Form>\r\n      </Segment>\r\n      <Message info>\r\n        <Icon name='info circle' />\r\n        We use <strong>Markdown</strong> for formatting. Click <a target='_blank' rel=\"noreferrer\" href='https://www.markdownguide.org/cheat-sheet/'>here</a> to learn more.\r\n      </Message>\r\n    </>\r\n  )\r\n  \r\n}\r\n\r\nexport default AddNote","import React from 'react'; // Add insta preview of markdown // Add preview button\r\n\r\nimport {Segment, Header, Divider, List} from 'semantic-ui-react';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <Segment stacked>\r\n      <Header as='h2' textAlign='center'>Notes-app</Header>\r\n      <Divider />\r\n      <p>Just a simple project to learn some of the React properties.</p>\r\n\r\n      <Header as='h3'>\r\n        Tecnologies used:\r\n      </Header>\r\n\r\n      <List>\r\n        <List.Item>\r\n          <List.Header as='a' href='https://reactjs.org'>\r\n            React\r\n          </List.Header>\r\n          <List.Description>\r\n            Provides the basic rendering.\r\n          </List.Description>\r\n        </List.Item>\r\n\r\n        <List.Item>\r\n          <List.Header as='a' href='https://reactrouter.com'>\r\n            React Router\r\n          </List.Header>\r\n          <List.Description>\r\n            A library that provides routing for a react page.\r\n          </List.Description>\r\n        </List.Item>\r\n\r\n        <List.Item>\r\n          <List.Header as='a' href='https://react.semantic-ui.com'>\r\n            Semantic UI - React\r\n          </List.Header>\r\n          <List.Description>\r\n            A nice and clean ui framework tailored for react.\r\n          </List.Description>\r\n        </List.Item>\r\n\r\n        <List.Item>\r\n          <List.Header as='a' href='https://www.npmjs.com/package/uuid'>\r\n            Uuid\r\n          </List.Header>\r\n          <List.Description>\r\n            A library for generating unique Ids.\r\n          </List.Description>\r\n        </List.Item>\r\n\r\n        <List.Item>\r\n          <List.Header as='a' href='https://github.com/remarkjs/react-remark'>\r\n            React-Remark\r\n          </List.Header>\r\n          <List.Description>\r\n            A react library to display markdown components.\r\n          </List.Description>\r\n        </List.Item>\r\n      </List>\r\n    </Segment>\r\n  )\r\n  \r\n}\r\n\r\nexport default Home;","import React, { useContext, useEffect, useState } from 'react';\r\nimport { Remark } from 'react-remark';\r\n\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport {Segment, Header, Divider} from 'semantic-ui-react';\r\n\r\nimport {INote} from '../App'\r\nimport { NotesContext } from '../contexts/NotesContext';\r\n\r\ninterface IParams {\r\n  id : string\r\n}\r\n\r\nconst ViewNote = () => {\r\n\r\n  const { notes } = useContext(NotesContext);\r\n\r\n  const [ viewData , setViewData ] = useState<INote>();\r\n\r\n\r\n  const { id } = useParams<IParams>();\r\n  console.log(id)\r\n  \r\n  useEffect(() => { // This component re-renders 3 times. Need to fix this\r\n    notes.forEach(item => {\r\n      if (item.id === id) {\r\n        setViewData(item);\r\n      }\r\n    })\r\n  }, [notes, id])\r\n\r\n  return (\r\n    <Segment stacked>\r\n      <Header as='h2' textAlign='center'>{(viewData)? viewData.title : \"404\"}</Header>\r\n      <Divider />\r\n      {\r\n        viewData &&\r\n        <Remark>\r\n          {viewData.content}\r\n        </Remark>\r\n      }\r\n      \r\n    </Segment>\r\n  )\r\n  \r\n}\r\n\r\nexport default ViewNote;","import React, { useContext } from 'react';\n\nimport { Container, Menu, Button, Input, Grid, Icon, Message, List } from  'semantic-ui-react';\nimport { HashRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nimport Note from './components/Note';\nimport AddNote from './components/AddNote';\nimport Home from './components/Home';\nimport ViewNote from './components/ViewNote';\n\nimport { NotesContext } from './contexts/NotesContext';\n\nexport interface INote {\n  id: string,\n  title: string,\n  content: string\n}\n\nconst App = () => {\n\n  const {notes, clearNotes} = useContext(NotesContext);\n\n  const handleClearStorage = (): void => {\n    localStorage.clear();\n\n    clearNotes();\n  }\n\n  return (\n    <Container>\n      <Router>\n        <Menu>\n          <Menu.Item header>Notes-app</Menu.Item>\n\n          <Menu.Item>\n            <Button basic as={Link} to='/'>\n              Home\n            </Button>\n          </Menu.Item>\n\n          <Menu.Item>\n            <Button primary as={Link} to='/new'>\n\n            <Icon name='add' />\n              New note\n            </Button>\n          </Menu.Item>\n\n          <Menu.Item>\n            <Button basic negative onClick={handleClearStorage}>\n              Clear Storage\n            </Button>\n          </Menu.Item>\n\n          <Menu.Item position='right'>\n            <Input className='icon' icon='search' placeholder='Search...' />\n          </Menu.Item>\n        </Menu>\n\n        <Grid>\n          <Grid.Column width={8}>\n            {\n              (!notes[0]) &&\n              <Message info>No notes added. Add a new note using the button above.</Message>\n            }\n          {/* <Masonry\n            breakpointCols={2}\n            className=\"my-masonry-grid\"\n            columnClassName=\"my-masonry-grid_column\"\n          > */}\n          <List divided selection>\n            {notes.map(item => <Note key={item.id} {...item} />)}\n          </List>\n            \n          {/* </Masonry> */}\n\n          </Grid.Column>\n          <Grid.Column width={8}>\n            <Switch>\n              <Route path='/new'>\n                <AddNote/>\n              </Route>\n\n              <Route path={'/note/:id'} >\n                <ViewNote/>\n              </Route>\n\n              <Route path='/'>\n                <Home />\n              </Route>\n              \n            </Switch>\n            \n            \n          </Grid.Column>\n        </Grid>\n\n      </Router>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'semantic-ui-css/semantic.min.css'\n\nimport {NotesProvider} from './contexts/NotesContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <NotesProvider>\n      <App />\n    </NotesProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}